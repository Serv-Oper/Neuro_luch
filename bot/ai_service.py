import aiohttp
import asyncio
import logging
from typing import List, Dict, Optional
import ssl
import certifi
from aiohttp import ClientTimeout
from bot.utils import MissingChatError
from config import IO_API_KEY
from db import (
    MessageRole,
    get_active_chat,
    get_chat_messages,
    add_message,
    get_model_by_key,
)

logger = logging.getLogger(__name__)

class AIService:
    BASE_URL = "https://api.intelligence.io.solutions/api/v1"
    MAX_RETRIES = 3
    RETRY_BACKOFF = 1  # seconds multiplier
    DEFAULT_TIMEOUT = 60  # seconds

    def __init__(self, api_key: str = IO_API_KEY):
        self._headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        self._session: Optional[aiohttp.ClientSession] = None

    async def _get_session(self) -> aiohttp.ClientSession:
        if not self._session or self._session.closed:
            # —Å–æ–∑–¥–∞—ë–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫–æ—Ä–Ω—è–º–∏ –∏–∑ certifi
            ssl_ctx = ssl.create_default_context(cafile=certifi.where())
            connector = aiohttp.TCPConnector(ssl=ssl_ctx)

            # –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ—Ç –∂–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞—à connector
            self._session = aiohttp.ClientSession(
                headers=self._headers,
                connector=connector,
            )
        return self._session

    async def _request(self, method: str, path: str, **kwargs) -> Dict:
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å retry/backoff.
        """
        # Apply default timeout if none provided
        if "timeout" not in kwargs or kwargs.get("timeout") is None:
            kwargs["timeout"] = ClientTimeout(total=self.DEFAULT_TIMEOUT)

        url = f"{self.BASE_URL}{path}"
        session = await self._get_session()

        for attempt in range(1, self.MAX_RETRIES + 1):
            try:
                async with session.request(method, url, **kwargs) as resp:
                    if resp.status == 200:
                        return await resp.json()
                    elif resp.status in (429, 500, 502, 503, 504):
                        retry_after = resp.headers.get("Retry-After")
                        delay = int(retry_after) if retry_after and retry_after.isdigit() else self.RETRY_BACKOFF * (2 ** (attempt - 1))
                        logger.warning(f"[{resp.status}] {method} {url}, retry {attempt} after {delay}s")
                        await asyncio.sleep(delay)
                        continue
                    else:
                        error_body = await resp.text()
                        logger.error(f"HTTP {resp.status} error body: {error_body}")
                        resp.raise_for_status()
            except Exception as e:
                logger.error(f"Error on {method} {url}: {e}")
                if attempt < self.MAX_RETRIES:
                    await asyncio.sleep(self.RETRY_BACKOFF * (2 ** (attempt - 1)))
                    continue
                raise

        raise RuntimeError(f"Failed {method} {url} after {self.MAX_RETRIES} attempts")

    async def get_available_models(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ chat-–º–æ–¥–µ–ª–µ–π –∏ embedding-–º–æ–¥–µ–ª–µ–π, –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É models.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict key_name -> model_id.
        """
        data = await self._request("GET", "/models")
        chat_models = {m["id"].split("/")[-1]: m["id"] for m in data.get("data", [])}

        data = await self._request("GET", "/embedding-models")
        embed_models = {m["id"].split("/")[-1]: m["id"] for m in data.get("data", [])}

        return {**chat_models, **embed_models}

    async def chat_complete(self, user_id: int, prompt: str) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—â–µ–Ω–∏—è: –±–µ—Ä—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã–π Chat –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É user_id,
        –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Å —É—á—ë—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤)
        –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
        """
        # 1) –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat = await get_active_chat(user_id)
        if chat is None:
            raise MissingChatError(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ ¬´üÜï –ù–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä¬ª"
            )

        # 2) –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ë–î
        model = await get_model_by_key(chat.model_key)
        if not model:
            raise RuntimeError(f"–ú–æ–¥–µ–ª—å '{chat.model_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")

        # 3) –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history = await get_chat_messages(chat.id)

        # 4) –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à—É system‚Äê—Ä–æ–ª—å –¥–ª—è smart-–º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if chat.model_key == "smart":
            system_content = (
                "You are Luch Neuro (also known as Luch GPT), an expert AI assistant "
                "who deeply understands any topic the user brings up. Always introduce "
                "yourself as ‚ÄúLuch Neuro‚Äù or ‚ÄúLuch GPT‚Äù if asked. Your default reply "
                "language is Russian‚Äîuse Russian in your answers unless the user writes "
                "in another language or explicitly requests a different language. Be thorough, "
                "accurate, and professional, while keeping your tone friendly and helpful."
            )
        else:
            system_content = ""

        messages: list[dict] = [{"role": "system", "content": system_content}]
        for msg in history:
            messages.append({"role": msg.role.value, "content": msg.content})
        messages.append({"role": "user", "content": prompt})

        # 5) –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        payload = {"model": model.model_id, "messages": messages}
        data = await self._request(
            "POST",
            "/chat/completions",
            json=payload,
            timeout=60
        )

        # 6) –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        choice = data["choices"][0]["message"]
        response_text: str = choice["content"]
        usage = data.get("usage", {})
        prompt_tokens = usage.get("prompt_tokens")
        completion_tokens = usage.get("completion_tokens")
        total_tokens = usage.get("total_tokens")

        # 7) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É: —Å–Ω–∞—á–∞–ª–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await add_message(
            chat.id,
            role=MessageRole.USER,
            content=prompt,
            prompt_tokens=prompt_tokens,
            total_tokens=prompt_tokens,
        )

        # –ø–æ—Ç–æ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        await add_message(
            chat.id,
            role=MessageRole.BOT,
            content=response_text,
            completion_tokens=completion_tokens,
            total_tokens=total_tokens,
        )

        # 8) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        return response_text

    async def create_embedding(self, text: str, model_key: str) -> List[float]:
        """
        –ó–∞–ø—Ä–æ—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
        """
        model = await get_model_by_key(model_key)
        if not model:
            raise RuntimeError(f"–ú–æ–¥–µ–ª—å embedding '{model_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        payload = {"model": model.model_id, "input": text, "encoding_format": "float"}
        data = await self._request("POST", "/embeddings", json=payload)
        return data["data"][0]["embedding"]

    async def run_workflow(self, text: str, agent_names: List[str], args: Dict) -> Dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç workflow-–∞–≥–µ–Ω—Ç–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –ø–æ–ª–µ–º 'result'.
        """
        payload = {"text": text, "agent_names": agent_names, "args": args}
        data = await self._request("POST", "/workflows/run", json=payload)
        return data.get("result", {})

    async def analyze_image(
            self,
            user_id: int,
            image_url: str,
            prompt: Optional[str] = None
    ) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ vision-–º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
        –µ—ë —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑: –æ–ø–∏—Å–∞–Ω–∏–µ, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
        `prompt` ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ).
        """
        # 1) –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ user_id
        chat = await get_active_chat(user_id)
        if not chat:
            raise RuntimeError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.")

        # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç vision
        model = await get_model_by_key(chat.model_key)
        model_id: str = model.model_id  # type: ignore[assignment]
        if not model or "vision" not in model_id.lower():
            raise RuntimeError("–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

        # 3) –°–∏—Å—Ç–µ–º–Ω–∞—è —Ä–æ–ª—å —Å —á—ë—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ vision-–∞–Ω–∞–ª–∏–∑—É
        system = {
            "role": "system",
            "content": (
                "You are VisionGPT (aka Luch Neuro), an expert AI vision assistant.\n"
                "When the user sends an image, you must:\n"
                "1. Describe in Russian everything you see, using clear bullet points.\n"
                "2. If the image contains any visible problem, question or exercise, "
                "   identify it and solve it step by step with your reasoning.\n"
                "3. If any part is unreadable or ambiguous, ask the user for clarification.\n"
                "4. Be thorough, accurate and concise."
            )
        }

        # 4) –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        text_part = prompt.strip() if prompt else ""
        user_msg = {
            "role": "user",
            "content": [
                {"type": "text", "text": text_part},
                {"type": "image_url", "image_url": {"url": image_url}}
            ]
        }

        # 5) –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º payload
        payload = {
            "model": model_id,
            "messages": [system, user_msg],
            "max_tokens": 2560,
            "temperature": 0.2
        }
        data = await self._request(
            "POST",
            "/chat/completions",
            json=payload,
            timeout=120
        )

        # 6) –ò–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        resp = data["choices"][0]["message"]["content"]
        usage = data.get("usage", {})
        prompt_tokens = usage.get("prompt_tokens")
        completion_tokens = usage.get("completion_tokens")

        # 7) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—Ç—å –∫–æ–ª–æ–Ω–∫—É
        placeholder = "[Image]" if image_url.startswith("data:") else f"[Image] {image_url}"
        await add_message(
            chat.id,
            role=MessageRole.USER,
            content=placeholder,
            prompt_tokens=prompt_tokens,
            total_tokens=prompt_tokens,
        )
        await add_message(
            chat.id,
            role=MessageRole.BOT,
            content=resp,
            completion_tokens=completion_tokens,
            total_tokens=completion_tokens,
        )

        return resp

    async def analyze_image_bytes(
            self,
            user_id: int,
            image_bytes: bytes,
            prompt: Optional[str] = None
    ) -> str:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏—Ö –≤ –≤–∏–¥–µ data-URI,
        –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–∏–∫–∞–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
        """
        import base64
        import imghdr

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ–∞–π–ª–∞ (fallback ‚Äî image/jpeg)
        img_type = imghdr.what(None, h=image_bytes) or "jpeg"
        mime = f"image/{img_type}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º data-URI
        b64 = base64.b64encode(image_bytes).decode()
        data_uri = f"data:{mime};base64,{b64}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ analyze_image
        return await self.analyze_image(user_id, data_uri, prompt)

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º aiohttp-—Å–µ—Å—Å–∏—é."""
        if self._session and not self._session.closed:
            await self._session.close()

    async def __aenter__(self) -> "AIService":
        await self._get_session()
        return self

    async def __aexit__(self, exc_type, exc, tb) -> None:
        await self.close()